{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Saloon%20Project/client/src/app/api/endpoints.js"],"sourcesContent":["export const endpoint = {\r\n    BARBER:{\r\n        GET : '/get-employee'\r\n    },\r\n    ADMIN:{\r\n        BARBER:{\r\n            ADD : 'admin/add-employee'\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;AAAO,MAAM,WAAW;IACpB,QAAO;QACH,KAAM;IACV;IACA,OAAM;QACF,QAAO;YACH,KAAM;QACV;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Saloon%20Project/client/src/app/api/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http:localhost:5001/api',    \r\n    withCredentials: true,\r\n});\r\n\r\nexport default axiosInstance ;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC/B,SAAS;IACT,iBAAiB;AACrB;uCAEe","debugId":null}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Saloon%20Project/client/src/redux/features/BarberSlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { endpoint } from '../../app/api/endpoints';\r\nimport axiosInstance from '../../app/api/axiosInstance'\r\nexport interface Barber {\r\n  _id: string;\r\n  name: string;\r\n  specialization: string;\r\n  image?: string;\r\n}\r\n\r\ninterface BarberState {\r\n  barbers: Barber[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: BarberState = {\r\n  barbers: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// ðŸ”¹ Fetch barbers\r\nexport const fetchBarbers = createAsyncThunk('barbers/fetchAll', async (_, thunkAPI) => {\r\n  try {\r\n    const res = await axiosInstance.get(endpoint.BARBER.GET);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    console.log(error,\"hh\");\r\n    \r\n    return thunkAPI.rejectWithValue(error.response?.data?.message || 'Failed to fetch barbers');\r\n\r\n  }\r\n});\r\n\r\nconst barberSlice = createSlice({\r\n  name: 'barbers',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchBarbers.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchBarbers.fulfilled, (state, action: PayloadAction<Barber[]>) => {\r\n        state.loading = false;\r\n        state.barbers = action.payload;\r\n      })\r\n      .addCase(fetchBarbers.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload as string;\r\n      });\r\n  },\r\n});\r\n\r\nexport default barberSlice.reducer;\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;;;;AAcA,MAAM,eAA4B;IAChC,SAAS,EAAE;IACX,SAAS;IACT,OAAO;AACT;AAGO,MAAM,eAAe,CAAA,GAAA,8LAAA,CAAA,mBAAgB,AAAD,EAAE,oBAAoB,OAAO,GAAG;IACzE,IAAI;QACF,MAAM,MAAM,MAAM,qIAAA,CAAA,UAAa,CAAC,GAAG,CAAC,iIAAA,CAAA,WAAQ,CAAC,MAAM,CAAC,GAAG;QACvD,OAAO,IAAI,IAAI;IACjB,EAAE,OAAO,OAAY;QACnB,QAAQ,GAAG,CAAC,OAAM;QAElB,OAAO,SAAS,eAAe,CAAC,MAAM,QAAQ,EAAE,MAAM,WAAW;IAEnE;AACF;AAEA,MAAM,cAAc,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IAC9B,MAAM;IACN;IACA,UAAU,CAAC;IACX,eAAe,CAAC;QACd,QACG,OAAO,CAAC,aAAa,OAAO,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAChB,GACC,OAAO,CAAC,aAAa,SAAS,EAAE,CAAC,OAAO;YACvC,MAAM,OAAO,GAAG;YAChB,MAAM,OAAO,GAAG,OAAO,OAAO;QAChC,GACC,OAAO,CAAC,aAAa,QAAQ,EAAE,CAAC,OAAO;YACtC,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG,OAAO,OAAO;QAC9B;IACJ;AACF;uCAEe,YAAY,OAAO","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Saloon%20Project/client/src/redux/app/store.ts"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport  BarberSlice  from \"../features/BarberSlice\";\r\nconst store = configureStore({\r\n    reducer:{\r\n        barber:BarberSlice\r\n    }\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store ; "],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IACzB,SAAQ;QACJ,QAAO,2IAAA,CAAA,UAAW;IACtB;AACJ;uCAIe","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Saloon%20Project/client/src/redux/ReduxProvider.tsx"],"sourcesContent":["\"use client\";\r\nimport { ReactNode, FC } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./app/store\";\r\n\r\n\r\ninterface StoreProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\nconst ReduxProvider: FC<StoreProviderProps> = ({ children }) => {\r\n    return <Provider store={store}>{children}</Provider>;\r\n};\r\n\r\nexport defaultÂ ReduxProvider;"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAUA,MAAM,gBAAwC,CAAC,EAAE,QAAQ,EAAE;IACvD,qBAAO,6LAAC,4JAAA,CAAA,WAAQ;QAAC,OAAO,+HAAA,CAAA,UAAK;kBAAG;;;;;;AACpC;KAFM;uCAIS","debugId":null}}]
}